https://internetingishard.com/html-and-css/flexbox/

Flexbox uses two types of boxes that we’ve never seen before: “flex containers” and “flex items”. The job of a flex container is to group a bunch of flex items together and define how they’re positioned.
`Flexbox使用了我们以前从未见过的两种类型的盒子:“flex容器”和“flex项目”。flex容器的工作是将一系列flex项目组合在一起，并定义它们的位置。`

Every HTML element that’s a direct child of a flex container is an “item”. Flex items can be manipulated individually, but for the most part, it’s up to the container to determine their layout. The main purpose of flex items are to let their container know how many things it needs to position.
`flex容器的直接子元素的每个HTML元素都是“item”。Flex项目可以单独操作，但在很大程度上，它取决于容器来决定它们的布局。flex项目的主要目的是让他们的容器知道需要放置多少东西。`

As with float-based layouts, defining complex web pages with flexbox is all about nesting boxes. You align a bunch of flex items inside a container, and, in turn, those items can serve as flex containers for their own items. As you work through the examples in this chapter, remember that the fundamental task of laying out a page hasn’t changed: we’re still just moving a bunch of nested boxes around.
`与基于浮动的布局一样，用flexbox定义复杂的web页面都是关于嵌套的。您将一堆flex项目放在一个容器中，然后，这些项目可以作为它们自己的项目的flex容器。在本章的示例中，请记住，布局页面的基本任务并没有改变:我们仍然只是在移动一堆嵌套的方框。`

# flex containers

The first step in using flexbox is to turn one of our HTML elements into a flex container. We do this with the display property, which should be familiar from the CSS Box Model chapter. By giving it a value of flex, we’re telling the browser that everything in the box should be rendered with flexbox instead of the default box model.
`使用flex的第一步是将我们的一个HTML元素转换成一个flex容器。我们使用显示属性来完成这个操作，这应该是CSS Box Model章节所熟悉的。通过给它一个flex的值，我们告诉浏览器，盒子里的所有东西都应该用flexbox来呈现，而不是默认的框模型。`

Add the following line to our .menu-container rule to turn it into a flex container:
`在我们的系统中添加以下一行。menu- container规则将其转化为flex容器:`
```css
.menu-container {
  /* ... */
  display: flex;
}
```

This enables the flexbox layout mode—without it, the browser would ignore all the flexbox properties that we’re about to introduce. Explicitly defining flex containers means that you can mix and match flexbox with other layout models (e.g., floats and everything we’re going to learn in Advanced Positioning).
`这使得flexbox布局模式没有了它，浏览器将忽略我们将要介绍的所有flexbox属性。显式地定义flex容器意味着您可以将flex与其他布局模型(例如，float和我们将要学习的高级定位的所有东西)组合起来。`

Great! We have a flex container with one flex item in it. However, our page will look exactly like it did before because we haven’t told the container how to display its item.
`太棒了!我们有一个flex容器，里面有一个flex项目。但是，我们的页面看起来会和以前一样，因为我们还没有告诉容器如何显示它的项目。`


# aligning a flex item
After you’ve got a flex container, your next job is to define the horizontal alignment of its items. That’s what the justify-content property is for.
`在获得flex容器之后，下一个任务是定义其项目的水平对齐方式。这就是正当内容属性的用途。`
We can use it to center our .menu, like so:

```css
.menu-container {
  /* ... */
  display: flex;
  justify-content: center;    /* Add this */
}
```

This has the same effect as adding a margin: 0 auto declaration to the .menu element. But, notice how we did this by adding a property to the parent element (the flex container) instead of directly to the element we wanted to center (the flex item). Manipulating items through their containers like this is a common theme in flexbox, and it’s a bit of a divergence from how we’ve been positioning boxes thus far.
`这与添加页边:0自动声明的效果相同。菜单元素。但是，请注意我们是如何通过将属性添加到父元素(flex容器)而不是直接添加到我们想要处理的元素(flex项)。通过他们的容器来操作项目，比如这是flexbox的一个常见主题，这与我们目前的定位框有点分歧。`

Other values for justify-content are shown below:
`其他合理内容的值如下所示:`
```
center
flex-start
flex-end
space-around
space-between
```
Try changing justify-content to flex-start and flex-end. This should align the menu to the left and right side of the browser window, respectively. Be sure to change it back to center before moving on. The last two options are only useful when you have multiple flex items in a container.
`尝试改变正当的内容，以灵活的开始和灵活的结束。这将分别使菜单与浏览器窗口的左边和右边对齐。在继续之前，一定要把它换回中心。最后两个选项只有在容器中有多个flex项时才有用。`


# distributing multiple flex items
“Big deal,” you might be saying: we can do left/right alignment with floats and centering with auto-margins. True. Flexbox doesn’t show its real strength until we have more than one item in a container. The justify-content property also lets you distribute items equally inside a container.
`“大交易”，你可能会说:我们可以对浮动进行左/右对齐，以自动利润为中心。真实的。在一个容器中有多个项目之前，flex没有显示其真正的优势。正当内容属性还允许您在容器内均匀地分配条目。`

Change our .menu rule to match the following:
```css
.menu {
  border: 1px solid #fff;
  width: 900px;
  display: flex;
  justify-content: space-around;
}
```

This turns our .menu into a nested flex container, and the space-around value spreads its items out across its entire width. You should see something like this:
`这样的我们。菜单嵌入到一个嵌套的flex容器中，空间周围的值将其项目分散到整个宽度。你应该看到这样的东西:`

The flex container automatically distributes extra horizontal space to either side of each item. The space-between value is similar, but it only adds that extra space between items. This is what we actually want for our example page, so go ahead and update the justify-content line:
`flex容器自动分配额外的水平空间到每一项的任何一边。值之间的空间是相似的，但它只增加了项之间的额外空间。这是我们实际需要的示例页面，所以请继续更新正当内容行:`

Of course, you can also use center, flex-start, flex-end here if you want to push all the items to one side or another, but let’s leave it as space-between.
`当然，如果你想把所有的东西都推到一边，你也可以使用center,flex - start,flex - end，但是我们把它放在中间。`

# grouping flex items

Flex containers only know how to position elements that are one level deep (i.e., their child elements). They don’t care one bit about what’s inside their flex items. This means that grouping flex items is another weapon in your layout-creation arsenal. Wrapping a bunch of items in an extra <div> results in a totally different web page.
`Flex容器只知道如何定位一个深度的元素。,他们的子元素)。他们一点也不关心他们的flex项目里面有什么。这意味着将flex项目分组是您的layout创建武器库中的另一个武器。在一个额外的< div >中包装一堆条目会导致一个完全不同的网页。`

For example, let’s say you want both the Sign Up and Login links to be on the right side of the page, as in the screenshot below. All we need to do is stick them in another <div>:
`例如，假设您希望注册和登录链接都位于页面的右侧，就像下面的截图一样。我们需要做的就是把它们放到另一个< div >中:`

```css
<div class='menu'>
  <div class='date'>Aug 14, 2016</div>
  <div class='links'>
    <div class='signup'>Sign Up</div>      <!-- This is nested now -->
    <div class='login'>Login</div>         <!-- This one too! -->
  </div>
</div>
```

Instead of having three items, our .menu flex container now has only two (.date and .links). Under the existing space-between behavior, they’ll snap to the left and right side of the page.
`我们没有三样东西。菜单flex容器现在只有两个(。日期和link)。在现有的空间行为之间，它们会吸附在页面的左右两边。`

But, now we need to lay out the .links element because it’s using the default block layout mode. The solution: more nested flex containers! Add a new rule to our styles.css file that turns the .links element into a flex container:
`但是，现在我们需要列出。链接元素，因为它使用默认的块布局模式。解决方案:更多的嵌套flex容器!给我们的风格添加一个新的规则。css文件，它会打开。将元素链接到flex容器:`

```css
.links {
  border: 1px solid #fff;  /* For debugging */
  display: flex;
  justify-content: flex-end;
}

.login {
  margin-left: 20px;
}
```
This will put our links right where we want them. Notice that margins still work just like they did in the CSS Box Model. And, as with the normal box model, auto margins have a special meaning in flexbox (we’ll leave that for the end of the chapter though).
`这将把我们的链接放在我们想要的地方。注意，边距仍然工作，就像在CSS框模型中一样。而且，就像普通的盒子模型一样，在flexxbox中，汽车边距也有一个特殊的含义(不过，我们将在这一章的最后)。`


# cross-axis (vertical) alignment

So far, we’ve been manipulating horizontal alignment, but flex containers can also define the vertical alignment of their items. This is something that’s simply not possible with floats.
`到目前为止，我们一直在操纵水平对齐，但是flex容器也可以定义它们的项目的垂直对齐方式。这是不可能的浮点数。`

To explore this, we need to add a header underneath our menu. Add the following markup to flexbox.html after the .menu-container element:
`为了探究这个问题，我们需要在菜单下面添加一个标题。将以下标记添加到flexbox。html后。menu-container元素:`

This should all be familiar; however, the scenario is a little bit different than our menu. Since .header has an explicit height, items can be positioned vertically inside of it. The official specification calls this “cross-axis” alignment (we’ll see why in a moment), but for our purposes it might as well be called “vertical” alignment.
`这一切都应该是熟悉的;不过，这个场景与我们的菜单略有不同。自。标题有显式的高度，项目可以垂直放置在它里面。官方的规范称之为“横轴”对齐(稍后我们将看到为什么)，但是对于我们的目的，它可能被称为“垂直”对齐。`


Verticalalignment is defined by adding an align-items property to a flex container. Make our example page match the above screenshot with the following line:
`通过向flex容器添加一个align-items属性来定义垂直对齐。让我们的示例页面与上面的截图相匹配:`

The available options for align-items is similar to justify-content:
`alignitem的可用选项类似于正当内容:`

```
center
flex-start   (top)
flex-end      (bottom)
stretch
baseline
```

Most of these are pretty straightforward. The stretch option is worth a taking a minute to play with because it lets you display the background of each element. Let’s take a brief look by adding the following to styles.css:
`大部分都很简单。这个扩展选项值得花一分钟来玩，因为它让你显示每个元素的背景。让我们通过在styles. css中添加以下内容来简要介绍一下。`

The box for each item extends the full height of the flex container, regardless of how much content it contains. A common use case for this behavior is creating equal-height columns with a variable amount of content in each one—something very difficult to do with floats.

Be sure to delete the above changes and vertically center our content inside of .header before moving on.
`每个条目的框都扩展了flex容器的高度，不管它包含多少内容。这种行为的一个常见的用例是，在每一个操作中创建具有可变数量内容的等高度列，这与浮动非常困难。
 请务必删除上述更改，并将我们的内容垂直居中。头在继续之前。`


# wrapping flex items

Flexbox is a more powerful alternative to float-based grids. Not only can it render items as a grid—it can change their alignment, direction, order, and size, too. To create a grid, we need the flex-wrap property.
`Flexbox是一种更强大的基于浮动网格的替代品。它不仅可以将项目呈现为网格——它还可以更改它们的对齐、方向、顺序和大小。要创建网格，我们需要使用flex - wrap属性。`

Add a row of photos to flexbox.html so that we have something to work with. This should go inside of <body>, under the .header-container element:

`添加一排照片到flexbox。这就是我们要处理的东西。这应该在< body >，下面。header容器元素:`

```css
<div class='photo-grid-container'>
  <div class='photo-grid'>
    <div class='photo-grid-item first-item'>
      <img src='images/one.svg'/>
    </div>
    <div class='photo-grid-item'>
      <img src='images/two.svg'/>
    </div>
    <div class='photo-grid-item'>
      <img src='images/three.svg'/>
    </div>
  </div>
</div>
```


Again, the corresponding CSS should be familiar from previous sections:
`同样，相应的CSS应该与前面的部分相似:`


This should work as expected, but watch what happens when we add more items than can fit into the flex container. Insert an extra two photos into the .photo-grid:
`这应该像预期的那样工作，但是当我们添加更多的项目时，会发生什么情况，而不是在flex容器中。在. photo- grid中插入额外的两张照片:`
```HTML
<div class='photo-grid-item'>
  <img src='images/four.svg'/>
</div>
<div class='photo-grid-item last-item'>
  <img src='images/five.svg'/>
</div>
```

If you’re trying to build a hero banner that lets the user horizontally scroll through a bunch of photos, this might be desired behavior, but that’s not what we want. Adding the following flex-wrap property forces items that don’t fit to get bumped down to the next row:
`如果你想建立一个英雄横幅，让用户横向滚动一堆照片，这可能是你想要的行为，但这不是我们想要的。添加以下的弹性-包装属性，使那些不适合被撞到下一行的物品:`


Now, our flex items behave much like floated boxes, except flexbox gives us more control over how “extra” items are aligned in the final row via the justify-content property. For example, the last line is currently left-aligned. Try centering it by updating our .photo-grid rule, like so:
`现在，我们的flex项目很像浮动框，除了flexbox让我们更能控制“额外”项目如何通过合理内容属性在最后一行对齐。例如，最后一行当前是左对齐的。尝试以更新我们的来定心。photo-grid规则,如下所示:`


Achieving this with float-based layouts is ridiculously complicated.
`使用基于浮点的布局实现这一点非常复杂。`


# flex container direction

“Direction” refers to whether a container renders its items horizontally or vertically. So far, all the containers we’ve seen use the default horizontal direction, which means items are drawn one after another in the same row before popping down to the next column when they run out of space.
`“方向”指的是容器是水平的还是垂直的。到目前为止，我们看到的所有容器都使用了默认的水平方向，这意味着在它们耗尽空间之前，在相同的行中，项目被一个接一个地吸引到下一个列。`

One of the most amazing things about flexbox is its ability to transform rows into columns using only a single line of CSS. Try adding the following flex-direction declaration to our .photo-grid rule:
`关于flex最令人惊奇的事情之一是它能够只用一行CSS将行转换成列。尝试向我们添加下面的flex方向声明。photo-grid规则:`

```css
.photo-grid {
   /* ... */
   flex-direction: column;
 }
 ```

This changes the direction of the container from the default row value. Instead of a grid, our page now has a single vertical column:
`这将从默认的行值更改容器的方向。我们的页面现在没有一个网格，而是一个垂直的列:`

A key tenant of responsive design is presenting the same HTML markup to both mobile and desktop users. This presents a bit of a problem, as most mobile layouts are a single column, while most desktop layouts stack elements horizontally. You can imagine how useful flex-direction is going to become once we start building responsive layouts.
`响应式设计的关键租户向移动和桌面用户呈现相同的HTML标记。这带来了一点问题，因为大多数移动布局都是单个列，而大多数桌面布局都是水平的。你可以想象当我们开始构建响应式布局时，flex方向会变得多么有用。`

# alignment considerations
Notice that the column is hugging the left side of its flex container despite our justify-content: center; declaration. When you rotate the direction of a container, you also rotate the direction of the justify-content property. It now refers to the container’s vertical alignment—not its horizontal alignment.
`注意，尽管我们的内容是合理的，但该列仍然与它的flex容器的左侧相拥抱;声明。当你旋转一个容器的方向时，你也会旋转正当内容属性的方向。它现在指的是容器的垂直对齐，而不是它的水平对齐。`

To horizontally center our column, we need to define an align-items property on our .photo-grid:
`为了使列的水平居中，我们需要在. photo- grid上定义一个alignon - items属性:`

```css
.photo-grid {
  /* ... */
  flex-direction: column;
  align-items: center;      /* Add this */
}
```



# flex container order
Up until now, there’s been a tight correlation between the order of our HTML elements and the way boxes are rendered in a web page. With either floats or the flexbox techniques we’ve seen so far, the only way we could make a box appear before or after another one is to move around the underlying HTML markup. That’s about to change.
`到目前为止，HTML元素的顺序与在web页面中呈现的方式之间存在紧密联系。到目前为止，我们已经看到了float或flexbox技术，我们可以在另一个框之前或之后出现的唯一方法是移动底层的HTML标记。这是即将改变。`


The flex-direction property also offers you control over the order in which items appear via the row-reverse and column-reverse properties. To see this in action, let’s transform our column back into a grid, but this time around we’ll reverse the order of everything:
`flex- direction属性还提供了对通过行反向和列反向属性显示项的顺序的控制。为了在实际操作中看到这一点，让我们将我们的列转换回网格中，但是这次我们将颠倒一切的顺序:`

```css
.photo-grid {
  width: 900px;
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  flex-direction: row-reverse;  /* <--- Really freaking cool! */
  align-items: center;
}

```
Both rows are now rendered right-to-left instead of left-to-right. But, notice how this only swaps the order on a per-row basis: the first row doesn’t start at 5, it starts at 3. This is useful behavior for a lot of common design patterns (column-reverse in particular opens up a lot of doors for mobile layouts). We’ll learn how to get even more granular in the next section.
`这两行现在都变成了右向左，而不是从左到右。但是，请注意这只是按每一行的顺序交换顺序:第一行不从5开始，而是从3开始。这对于许多常见的设计模式来说是很有用的(特别是在列反向的情况下，为移动布局打开了许多门)。在下一节中，我们将学习如何获得更细的粒度。`

Reordering elements from inside a stylesheet is a big deal. Before flexbox, web developers had to resort to JavaScript hacks to accomplish this kind of thing. However, don’t abuse your newfound abilities. As we discussed in the very first chapter of this tutorial, you should always separate content from presentation. Changing the order like this is purely presentational—your HTML should still make sense without these styles applied to it.
`从样式表中重新排序元素是一件大事。在flexbox之前，web开发人员必须借助于JavaScript技巧来完成这类事情。但是，不要滥用你新发现的能力。正如我们在本教程的第一章中所讨论的，您应该始终将内容与表示分开。改变这样的顺序是纯粹的展示——如果没有这些样式，你的HTML应该是有意义的。`

# flex item order

This entire chapter has been about positioning flex items through their parent containers, but it’s also possible to manipulate individual items. The rest of this chapter is going to shift focus away from flex containers onto the items they contain.
`这整个章节都是关于通过它们的父容器来定位flex项目，但是也可以操作单个项目。本章的其余部分将把焦点从flex容器转移到它们所包含的项目上。`

Adding an order property to a flex item defines its order in the container without affecting surrounding items. Its default value is 0, and increasing or decreasing it from there moves the item to the right or left, respectively.

This can be used, for example, to swap order of the .first-item and .last-item elements in our grid. We should also change the row-reverse value from the previous section back to row because it’ll make our edits a little easier to see:
`将订单属性添加到flex项目中，定义了它在容器中的顺序，而不影响周围的项目。它的默认值为0，并增加或减少它，使其分别移动到左或右。
 这可以用，例如，交换顺序。第一项。网格中的最后一项元素。我们还应该将前一节的行反向值更改为row，因为这样可以更容易地看到:`
```
.photo-grid {
  /* ... */
  flex-direction: row;  /* Update this */
  align-items: center;
}

.first-item {
  order: 1;
}

.last-item {
  order: -1;
}
```

Unlike setting row-reverse and column-reverse on a flex container, order works across row/column boundaries. The above snippet will switch our first and last items, even though they appear on different rows.
`不同于在flex容器上设置行反向和列反向，顺序可以跨越行/列边界。上面的代码片段将切换我们的第一个和最后一个条目，即使它们出现在不同的行上。`

# flex item alignment 对齐
We can do the same thing with vertical alignment. What if we want that Subscribe link and those social icons to go at the bottom of the header instead of the center? Align them individually! This is where the align-self property comes in. Adding this to a flex item overrides the align-items value from its container:
`我们可以做同样的事情，垂直对齐。如果我们想让订阅链接和那些社会图标放在页眉底部而不是中心，那该怎么办?使他们单独!这就是align_self属性出现的地方。将其添加到一个flex项目中，可以覆盖从其容器中获得的align-items值:`

This should send them to the bottom of the .header. Note that margins (padding, too) work just like you’d expect.
`这应该将它们发送到. header的底部。注意，边距(边距)的工作原理和你预想的一样。`

You can align elements in other ways using the same values as the align-items property, listed below for convenience.
`您可以使用与align-items属性相同的值以其他方式对齐元素，以便方便。`

```
center
flex-start   (top)
flex-end      (bottom)
stretch
baseline

```

# flexible items

All our examples have revolved around items with fixed- or content-defined-widths. This has let us focus on the positioning aspects of flexbox, but it also means we’ve been ignoring its eponymous “flexible box” nature. Flex items are flexible: they can shrink and stretch to match the width of their containers.

The flex property defines the width of individual items in a flex container. Or, more accurately, it allows them to have flexible widths. It works as a weight that tells the flex container how to distribute extra space to each item. For example, an item with a flex value of 2 will grow twice as fast as items with the default value of 1.

`我们所有的例子都围绕着固定或内容定义宽度的项目。这让我们专注于flexbox的定位方面，但这也意味着我们忽略了它的同名“灵活的盒子”性质。Flex项目是灵活的:它们可以收缩和拉伸以匹配容器的宽度。
 flex属性定义flex容器中单个项目的宽度。或者，更准确地说，它允许他们有灵活的宽度。它的作用是告诉flex容器如何分配额外的空间给每个项目。例如，具有2的flex值的项的增长速度是默认值为1的项目的两倍。`

First, we need a footer to experiment with. Stick this after the .photo-grid-container element:
首先，我们需要一个脚注来进行实验。把这个贴在后面。photo-grid-container元素:

```
<div class='footer'>
  <div class='footer-item footer-one'></div>
  <div class='footer-item footer-two'></div>
  <div class='footer-item footer-three'></div>
</div>
```
Then, some CSS:
``` css
.footer {
  display: flex;
  justify-content: space-between;
}

.footer-item {
  border: 1px solid #fff;
  background-color: #D6E9FE;
  height: 200px;
  flex: 1;
}
```

That flex: 1; line tells the items to stretch to match the width of .footer. Since they all have the same weight, they’ll stretch equally:
`flex:1;行告诉要拉伸的项以匹配. footer的宽度。因为它们都有相同的重量，它们会均匀地伸展:`

Increasing the weight of one of the items makes it grow faster than the others. For example, we can make the third item grow twice as fast as the other two with the following rule:
`增加一件物品的重量使它比其他物品长得快。例如，我们可以使第三个项目的增长速度是其他两个项目的两倍。`

Compare this to the justify-content property, which distributes extra space between items. This is similar, but now we’re distributing that space into the items themselves. The result is full control over how flex items fit into their containers.
`将其与合理内容属性进行比较，后者在项目之间分配额外的空间。这是相似的，但是现在我们把这个空间分配到项目本身。结果是完全控制如何将flex条目放入容器中。`


# static item widths
We can even mix-and-match flexible boxes with fixed-width ones. flex: initial falls back to the item’s explicit width property. This lets us combine static and flexible boxes in complex ways.
`我们甚至可以把灵活的盒子和固定宽度的盒子混在一起。flex:初始值回落到项目的显式宽度属性。这让我们能够以复杂的方式组合静态和灵活的盒子。`

We’re going to make our footer behave like the above diagram. The center item is flexible, but the ones on either side are always the same size. All we need to do is add the following rule to our stylesheet:
`我们要让我们的footer表现得像上图。中心项目是灵活的，但是两边的都是一样的大小。我们需要做的只是将以下规则添加到样式表中:`

```
.footer-one,
.footer-three {
  background-color: #5995DA;
  flex: initial;
  width: 300px;
}
```
Without that flex: initial; line, the flex: 1; declaration would be inherited from the .footer-item rule, causing the width properties to be ignored. initial fixes this, and we get a flexible layout that also contains fixed-width items. When you resize the browser window, you’ll see that only the middle box in the footer gets resized.
`没有flex:初始;线,flex:1;声明将继承自。footer- item规则，导致忽略宽度属性。初始化这个，我们得到一个灵活的布局，它也包含固定宽度的项目。当您调整浏览器窗口的大小时，您将看到只有页脚的中间框被调整大小。`

This is a pretty common layout, and not just in footers, either. For instance, many websites have a fixed-width sidebar (or multiple sidebars) and a flexible content block containing the main text of the page. This is basically a taller version of the footer we just created.
`这是一个很常见的布局，而且不只是在页脚。例如，许多网站都有固定宽度的边栏(或多个边栏)和一个包含页面正文的灵活内容块。这基本上是我们刚刚创建的页脚的更高版本。`

# flex items and auto-margins

Auto-margins in flexbox are special. They can be used as an alternative to an extra <div> when trying to align a group of items to the left/right of a container. Think of auto-margins as a “divider” for flex items in the same container.

Let’s take a look by flattening our items in .menu so that it matches the following:
`flexbox的自动毛边很特别。当试图将一组项与容器的左/右对齐时，可以使用它们作为额外的< div >的替代方法。可以将自动利润率看作是同一容器中flex项目的“分配器”。
 让我们看一看把我们的产品压扁。菜单匹配如下:`

Reloading the page should make the items spread out equally through our menu, just like at the beginning of the chapter. We can replicate the desired layout by sticking an auto-margin between the items we want to separate, like so:
`重新加载页面应该让这些条目在我们的菜单中均匀分布，就像在章节的开头一样。我们可以在想要分开的项目之间粘贴一个自动空白来复制所需的布局:`

```
.signup {
  margin-left: auto;
}
```

Auto-margins eat up all the extra space in a flex container, so instead of distributing items equally, this moves the .signup and any following items (.login) to the right side of the container. This will give you the exact same layout we had before, but without that extra nested <div> to group them. Sometimes, it’s nice to keep your HTML flatter.
`在flex容器中，自动边距会占用所有额外的空间，因此不需要同样地分配项目。注册和任何下列项目(.登录)到容器的右边。这将给出我们之前的完全相同的布局，但是没有这个额外的嵌套< div >来分组。有时候，保持HTML的平滑是很好的。`


# summary
Flexbox gave us a ton of amazing new tools for laying out a web page. Compare these techniques to what we were able to do with floats, and it should be pretty clear that flexbox is a cleaner option for laying out modern websites:
`Flexbox为我们提供了大量令人惊叹的新工具，用于布局网页。将这些技术与我们在浮动平台上所做的相比，应该非常清楚的是，flexbox是一种更简洁的选择，可以在现代网站上进行布局:`

- Use `display: flex;` to create a flex container.
- Use `justify-content` to define the horizontal alignment of items.
- Use `align-items` to define the vertical alignment of items.
- Use `flex-direction` if you need columns instead of rows.
- Use the `row-reverse` or `column-reverse` values to flip item order.
- Use `order` to customize the order of individual elements.
- Use `align-self` to vertically align individual items.
- Use `flex` to create flexible boxes that can stretch and shrink.
```
——使用“显示:flex;来创建一个flex容器。
-使用“正当内容”来定义项目的水平对齐方式。
-使用“align-items”来定义项目的垂直对齐。
-如果你需要的是列而不是行，使用“灵活方向”。
-使用“行反向”或“列反向”的值来反转项目顺序。
-使用“order”来定制单个元素的顺序。
-使用“alignl - self”来垂直对齐单个项目。
-使用“flex”来创建可伸缩和收缩的灵活的盒子。
```

Remember that these flexbox properties are just a language that lets you tell browsers how to arrange a bunch of HTML elements. The hard part isn’t actually writing the HTML and CSS code, it’s figuring out, conceptually (on a piece of paper), the behavior of all the necessary boxes to create a given layout.

When a designer hands you a mockup to implement, your first task is to draw a bunch of boxes on it and determine how they’re supposed to stack, stretch, and shrink to achieve the desired design. Once you’ve got that done, it should be pretty easy to code it up using these new flexbox techniques.

The flexbox layout mode should be used for most of your web pages, but there are some things it’s not-so-good at, like gently tweaking element positions and preventing them from interacting with the rest of the page. After covering these kinds of advanced positioning techniques in the next chapter, you’ll be an HTML and CSS positioning expert.

请记住，这些flexbox属性只是一种语言，它允许您告诉浏览器如何排列一堆HTML元素。困难的部分实际上并不是编写HTML和CSS代码，而是从概念上(在一张纸上)，创建一个给定布局的所有必需的框的行为。
当设计人员递给您一个模型来实现时，您的第一个任务是在它上面绘制一堆框，并确定它们应该如何堆栈、拉伸和收缩以实现所需的设计。一旦完成了，使用这些新的flexbox技术就可以很容易地编写代码。
对于大多数web页面，应该使用flexbox布局模式，但是有些东西不太好，比如轻轻地调整元素位置，防止它们与页面的其他部分交互。在下一章中介绍了这些高级定位技术之后，您将成为一个HTML和CSS定位专家。